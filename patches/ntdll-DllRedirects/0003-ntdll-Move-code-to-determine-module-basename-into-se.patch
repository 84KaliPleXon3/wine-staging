From 7fd1463fccfb8ef7dc9632ab779c49050906b5be Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
Date: Sat, 13 Dec 2014 02:57:41 +0100
Subject: [PATCH] ntdll: Move code to determine module basename into separate
 function.

---
 dlls/ntdll/loadorder.c | 46 +++++++++++++++++++++++++++---------------
 1 file changed, 30 insertions(+), 16 deletions(-)

diff --git a/dlls/ntdll/loadorder.c b/dlls/ntdll/loadorder.c
index c013bb2b..eb7e6723 100644
--- a/dlls/ntdll/loadorder.c
+++ b/dlls/ntdll/loadorder.c
@@ -450,6 +450,34 @@ static enum loadorder get_load_order_value( HANDLE std_key, HANDLE app_key, cons
     return ret;
 }
 
+ /***************************************************************************
+  *	get_module_basename   (internal)
+  *
+  * Return the loadorder of a module.
+  * The system directory and '.dll' extension is stripped from the path.
+  */
+static WCHAR* get_module_basename( const WCHAR *path, WCHAR **basename )
+{
+    int len;
+    WCHAR *module;
+
+    /* Strip path information if the module resides in the system directory
+     */
+    if (!strncmpiW( system_dir, path, strlenW( system_dir )))
+    {
+        const WCHAR *p = path + strlenW( system_dir );
+        while (*p == '\\' || *p == '/') p++;
+        if (!strchrW( p, '\\' ) && !strchrW( p, '/' )) path = p;
+    }
+
+    if (!(len = strlenW(path))) return NULL;
+    if (!(module = RtlAllocateHeap( GetProcessHeap(), 0, (len + 2) * sizeof(WCHAR) ))) return NULL;
+    strcpyW( module+1, path );  /* reserve module[0] for the wildcard char */
+    *basename = (WCHAR *)get_basename( module+1 );
+
+    if (len >= 4) remove_dll_ext( module + 1 + len - 4 );
+    return module;
+}
 
 /***************************************************************************
  *	get_load_order   (internal)
@@ -464,7 +492,6 @@ enum loadorder get_load_order( const WCHAR *app_name, const UNICODE_STRING *nt_n
     HANDLE std_key, app_key = 0;
     const WCHAR *path = nt_name->Buffer;
     WCHAR *module, *basename;
-    int len;
 
     if (!init_done) init_load_order();
     std_key = get_standard_key();
@@ -473,21 +500,8 @@ enum loadorder get_load_order( const WCHAR *app_name, const UNICODE_STRING *nt_n
 
     TRACE("looking for %s\n", debugstr_w(path));
 
-    /* Strip path information if the module resides in the system directory
-     */
-    if (!strncmpiW( system_dir, path, strlenW( system_dir )))
-    {
-        const WCHAR *p = path + strlenW( system_dir );
-        while (*p == '\\' || *p == '/') p++;
-        if (!strchrW( p, '\\' ) && !strchrW( p, '/' )) path = p;
-    }
-
-    if (!(len = strlenW(path))) return ret;
-    if (!(module = RtlAllocateHeap( GetProcessHeap(), 0, (len + 2) * sizeof(WCHAR) ))) return ret;
-    strcpyW( module+1, path );  /* reserve module[0] for the wildcard char */
-    basename = (WCHAR *)get_basename( module+1 );
-
-    if (len >= 4) remove_dll_ext( module + 1 + len - 4 );
+    if (!(module = get_module_basename(path, &basename)))
+        return ret;
 
     /* first explicit module name */
     if ((ret = get_load_order_value( std_key, app_key, module+1 )) != LO_INVALID)
-- 
2.20.1

