From 72d852c01753120da3503f97dc1b9ab7d7c4d8f9 Mon Sep 17 00:00:00 2001
From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
Date: Fri, 18 Apr 2014 14:10:49 -0600
Subject: server: Inherit security attributes from parent directories on
 SetSecurityInfo. (try 7)

---
 server/fd.c   |  13 +++++-
 server/file.c | 133 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++--
 server/file.h |   1 +
 3 files changed, 141 insertions(+), 6 deletions(-)

diff --git a/server/fd.c b/server/fd.c
index e3b722c..e6ec90a 100644
--- a/server/fd.c
+++ b/server/fd.c
@@ -1634,6 +1634,16 @@ struct fd *alloc_pseudo_fd( const struct fd_ops *fd_user_ops, struct object *use
     return fd;
 }
 
+char *fd_get_unix_name( struct fd *obj )
+{
+    char *unix_name;
+    if (!obj->unix_name) return NULL;
+    unix_name = mem_alloc( strlen(obj->unix_name) + 1 );
+    if (!unix_name) return NULL;
+    strcpy( unix_name, obj->unix_name );
+    return unix_name;
+}
+
 /* duplicate an fd object for a different user */
 struct fd *dup_fd_object( struct fd *orig, unsigned int access, unsigned int sharing, unsigned int options )
 {
@@ -1647,8 +1657,7 @@ struct fd *dup_fd_object( struct fd *orig, unsigned int access, unsigned int sha
 
     if (orig->unix_name)
     {
-        if (!(fd->unix_name = mem_alloc( strlen(orig->unix_name) + 1 ))) goto failed;
-        strcpy( fd->unix_name, orig->unix_name );
+        if (!(fd->unix_name = fd_get_unix_name( orig ))) goto failed;
     }
 
     if (orig->inode)
diff --git a/server/file.c b/server/file.c
index 188e352..146ea68 100644
--- a/server/file.c
+++ b/server/file.c
@@ -333,6 +333,106 @@ struct security_descriptor *inherit_sd( const struct security_descriptor *parent
     return sd;
 }
 
+struct security_descriptor *file_combine_sds( const struct security_descriptor *parent_sd,
+                                              const struct security_descriptor *child_sd )
+{
+    size_t dacl_size = sizeof(ACL), ace_count = 0;
+    const struct security_descriptor *old_sd;
+    struct security_descriptor *sd = NULL;
+    const ACL *child_dacl, *parent_dacl;
+    int child_present, parent_present;
+    const SID *user, *group;
+    const ACE_HEADER *old_ace;
+    ACE_HEADER *ace;
+    ACL *dacl;
+    char *ptr;
+    ULONG i;
+
+    child_dacl = sd_get_dacl( child_sd, &child_present );
+    if (child_present && child_dacl)
+    {
+        old_ace = (const ACE_HEADER *)(child_dacl + 1);
+        for (i = 0; i < child_dacl->AceCount; i++, old_ace = ace_next( old_ace ))
+        {
+            ace_count++;
+            dacl_size += sizeof(ACE_HEADER) + old_ace->AceSize;
+        }
+    }
+
+    parent_dacl = sd_get_dacl( parent_sd, &parent_present );
+    if (parent_present && parent_dacl)
+    {
+        old_ace = (const ACE_HEADER *)(parent_dacl + 1);
+        for (i = 0; i < parent_dacl->AceCount; i++, old_ace = ace_next( old_ace ))
+        {
+            ace_count++;
+            dacl_size += sizeof(ACE_HEADER) + old_ace->AceSize;
+        }
+    }
+
+    if(!ace_count) return sd; /* No inheritance */
+
+    /* FIXME: should use set_info flags? */
+    if (child_present && child_dacl)
+        old_sd = child_sd;
+    else
+        old_sd = parent_sd;
+
+    /* Fill in the security descriptor so that it is compatible with our DACL */
+    user = (const SID *)(old_sd + 1);
+    group = (const SID *)((char *)(old_sd + 1) + old_sd->owner_len);
+    sd = mem_alloc( sizeof(struct security_descriptor) + old_sd->owner_len
+                    + old_sd->group_len + dacl_size );
+    if (!sd) return sd;
+    sd->control = SE_DACL_PRESENT;
+    sd->owner_len = old_sd->owner_len;
+    sd->group_len = old_sd->group_len;
+    sd->sacl_len = 0;
+    sd->dacl_len = dacl_size;
+    ptr = (char *)(sd + 1);
+    memcpy( ptr, user, sd->owner_len );
+    ptr += sd->owner_len;
+    memcpy( ptr, group, sd->group_len );
+    ptr += sd->group_len;
+    dacl = (ACL *)ptr;
+    dacl->AclRevision = ACL_REVISION;
+    dacl->Sbz1 = 0;
+    dacl->AclSize = dacl_size;
+    dacl->AceCount = ace_count;
+    dacl->Sbz2 = 0;
+    ace = (ACE_HEADER *)(dacl + 1);
+
+    if (parent_present && parent_dacl)
+    {
+        /* Build the new DACL, inheriting from the parent's information */
+        old_ace = (const ACE_HEADER *)(parent_dacl + 1);
+        for (i = 0; i < parent_dacl->AceCount; i++, old_ace = ace_next( old_ace ))
+        {
+            ace->AceType = old_ace->AceType;
+            ace->AceFlags = old_ace->AceFlags;
+            ace->AceSize = old_ace->AceSize;
+            memcpy( ace + 1, old_ace + 1, old_ace->AceSize - sizeof(ACE_HEADER));
+            ace = (ACE_HEADER *)ace_next( ace );
+        }
+    }
+
+    if (child_present && child_dacl)
+    {
+        /* Build the new DACL, inheriting from the child's information */
+        old_ace = (const ACE_HEADER *)(child_dacl + 1);
+        for (i = 0; i < child_dacl->AceCount; i++, old_ace = ace_next( old_ace ))
+        {
+            ace->AceType = old_ace->AceType;
+            ace->AceFlags = old_ace->AceFlags;
+            ace->AceSize = old_ace->AceSize;
+            memcpy( ace + 1, old_ace + 1, old_ace->AceSize - sizeof(ACE_HEADER));
+            ace = (ACE_HEADER *)ace_next( ace );
+        }
+    }
+
+    return sd;
+}
+
 static struct security_descriptor *file_get_parent_sd( struct fd *root, const char *child_name,
                                                        int child_len, int is_dir )
 {
@@ -805,20 +905,41 @@ mode_t sd_to_mode( const struct security_descriptor *sd, const SID *owner )
 int set_file_sd( struct object *obj, struct fd *fd, const struct security_descriptor *sd,
                  unsigned int set_info )
 {
+    struct security_descriptor *tmp_sd = NULL;
     int unix_fd = get_unix_fd( fd );
     const SID *owner, *group;
     struct stat st;
     mode_t mode;
+    int ret = 1;
 
     if (unix_fd == -1 || fstat( unix_fd, &st ) == -1) return 1;
 
+    if (!(set_info & PROTECTED_DACL_SECURITY_INFORMATION))
+    {
+        char *child_name = fd_get_unix_name( fd );
+        if (child_name)
+        {
+            struct security_descriptor *parent_sd;
+            parent_sd = file_get_parent_sd( NULL, child_name, strlen(child_name),
+                                            S_ISDIR(st.st_mode) );
+            free( child_name );
+            if (parent_sd)
+            {
+                tmp_sd = file_combine_sds( parent_sd, sd );
+                if (tmp_sd) sd = tmp_sd; /* only used combined sd if successful */
+                free( parent_sd );
+            }
+        }
+    }
+
     if (set_info & OWNER_SECURITY_INFORMATION)
     {
         owner = sd_get_owner( sd );
         if (!owner)
         {
             set_error( STATUS_INVALID_SECURITY_DESCR );
-            return 0;
+            ret = 0;
+            goto err;
         }
         if (!obj->sd || !security_equal_sid( owner, sd_get_owner( obj->sd ) ))
         {
@@ -836,7 +957,8 @@ int set_file_sd( struct object *obj, struct fd *fd, const struct security_descri
         if (!group)
         {
             set_error( STATUS_INVALID_SECURITY_DESCR );
-            return 0;
+            ret = 0;
+            goto err;
         }
         if (!obj->sd || !security_equal_sid( group, sd_get_group( obj->sd ) ))
         {
@@ -861,10 +983,13 @@ int set_file_sd( struct object *obj, struct fd *fd, const struct security_descri
         if (((st.st_mode ^ mode) & (S_IRWXU|S_IRWXG|S_IRWXO)) && fchmod( unix_fd, mode ) == -1)
         {
             file_set_error();
-            return 0;
+            ret = 0;
         }
     }
-    return 1;
+
+err:
+    free( tmp_sd );
+    return ret;
 }
 
 static int file_set_sd( struct object *obj, const struct security_descriptor *sd,
diff --git a/server/file.h b/server/file.h
index e15fa2a..00bfa7a 100644
--- a/server/file.h
+++ b/server/file.h
@@ -79,6 +79,7 @@ extern void allow_fd_caching( struct fd *fd );
 extern void set_fd_signaled( struct fd *fd, int signaled );
 extern int is_fd_signaled( struct fd *fd );
 
+extern char *fd_get_unix_name( struct fd *obj );
 extern int default_fd_signaled( struct object *obj, struct wait_queue_entry *entry );
 extern unsigned int default_fd_map_access( struct object *obj, unsigned int access );
 extern int default_fd_get_poll_events( struct fd *fd );
-- 
2.3.3

