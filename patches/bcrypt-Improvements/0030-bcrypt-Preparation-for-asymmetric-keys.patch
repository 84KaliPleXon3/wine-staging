From c720c7cffa486b64b860822e765fb7818c2c2081 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
Date: Fri, 29 Sep 2017 18:31:55 +0200
Subject: [PATCH] bcrypt: Preparation for asymmetric keys.

---
 dlls/bcrypt/bcrypt_main.c | 316 ++++++++++++++++++++++++++++++----------------
 1 file changed, 207 insertions(+), 109 deletions(-)

diff --git a/dlls/bcrypt/bcrypt_main.c b/dlls/bcrypt/bcrypt_main.c
index 2cd1271..7eca112 100644
--- a/dlls/bcrypt/bcrypt_main.c
+++ b/dlls/bcrypt/bcrypt_main.c
@@ -238,16 +238,17 @@ static const struct {
     ULONG hash_length;
     ULONG block_bits;
     const WCHAR *alg_name;
+    BOOL symmetric;
 } alg_props[] = {
-    /* ALG_ID_AES    */ {  654,    0,    0, BCRYPT_AES_ALGORITHM },
-    /* ALG_ID_MD2    */ {  270,   16,  128, BCRYPT_MD2_ALGORITHM },
-    /* ALG_ID_MD4    */ {  270,   16,  512, BCRYPT_MD4_ALGORITHM },
-    /* ALG_ID_MD5    */ {  274,   16,  512, BCRYPT_MD5_ALGORITHM },
-    /* ALG_ID_RNG    */ {    0,    0,    0, BCRYPT_RNG_ALGORITHM },
-    /* ALG_ID_SHA1   */ {  278,   20,  512, BCRYPT_SHA1_ALGORITHM },
-    /* ALG_ID_SHA256 */ {  286,   32,  512, BCRYPT_SHA256_ALGORITHM },
-    /* ALG_ID_SHA384 */ {  382,   48, 1024, BCRYPT_SHA384_ALGORITHM },
-    /* ALG_ID_SHA512 */ {  382,   64, 1024, BCRYPT_SHA512_ALGORITHM }
+    /* ALG_ID_AES    */ {  654,    0,    0, BCRYPT_AES_ALGORITHM,    TRUE },
+    /* ALG_ID_MD2    */ {  270,   16,  128, BCRYPT_MD2_ALGORITHM,    FALSE },
+    /* ALG_ID_MD4    */ {  270,   16,  512, BCRYPT_MD4_ALGORITHM,    FALSE },
+    /* ALG_ID_MD5    */ {  274,   16,  512, BCRYPT_MD5_ALGORITHM,    FALSE },
+    /* ALG_ID_RNG    */ {    0,    0,    0, BCRYPT_RNG_ALGORITHM,    FALSE },
+    /* ALG_ID_SHA1   */ {  278,   20,  512, BCRYPT_SHA1_ALGORITHM,   FALSE },
+    /* ALG_ID_SHA256 */ {  286,   32,  512, BCRYPT_SHA256_ALGORITHM, FALSE },
+    /* ALG_ID_SHA384 */ {  382,   48, 1024, BCRYPT_SHA384_ALGORITHM, FALSE },
+    /* ALG_ID_SHA512 */ {  382,   64, 1024, BCRYPT_SHA512_ALGORITHM, FALSE }
 };
 
 struct algorithm
@@ -894,10 +895,8 @@ static ULONG get_block_size( struct algorithm *alg )
 #endif
 
 #if defined(HAVE_GNUTLS_CIPHER_INIT) && !defined(HAVE_COMMONCRYPTO_COMMONCRYPTOR_H)
-struct key
+struct key_symmetric
 {
-    struct object      hdr;
-    enum alg_id        alg_id;
     enum mode_id       mode;
     ULONG              block_size;
     gnutls_cipher_hd_t handle;
@@ -905,7 +904,17 @@ struct key
     ULONG              secret_len;
 };
 
-static NTSTATUS key_init( struct key *key, struct algorithm *alg, const UCHAR *secret, ULONG secret_len )
+struct key
+{
+    struct object      hdr;
+    enum alg_id        alg_id;
+    union
+    {
+        struct key_symmetric s;
+    } u;
+};
+
+static NTSTATUS key_symmetric_init( struct key *key, struct algorithm *alg, const UCHAR *secret, ULONG secret_len )
 {
     UCHAR *buffer;
 
@@ -921,34 +930,64 @@ static NTSTATUS key_init( struct key *key, struct algorithm *alg, const UCHAR *s
         return STATUS_NOT_SUPPORTED;
     }
 
-    if (!(key->block_size = get_block_size( alg ))) return STATUS_INVALID_PARAMETER;
-    if (!(buffer = heap_alloc( GetProcessHeap(), 0, secret_len ))) return STATUS_NO_MEMORY;
+    if (!(key->u.s.block_size = get_block_size( alg ))) return STATUS_INVALID_PARAMETER;
+    if (!(buffer = heap_alloc( secret_len ))) return STATUS_NO_MEMORY;
     memcpy( buffer, secret, secret_len );
 
-    key->alg_id     = alg->id;
-    key->mode       = alg->mode;
-    key->handle     = 0;        /* initialized on first use */
-    key->secret     = buffer;
-    key->secret_len = secret_len;
+    key->alg_id         = alg->id;
+    key->u.s.mode       = alg->mode;
+    key->u.s.handle     = 0;        /* initialized on first use */
+    key->u.s.secret     = buffer;
+    key->u.s.secret_len = secret_len;
 
     return STATUS_SUCCESS;
 }
 
+static inline BOOL key_is_symmetric( struct key *key )
+{
+    return alg_props[key->alg_id].symmetric;
+}
+
+static inline BOOL key_is_asymmetric( struct key *key )
+{
+    return !alg_props[key->alg_id].symmetric;
+}
+
 static NTSTATUS key_duplicate( struct key *key_orig, struct key *key_copy )
 {
     UCHAR *buffer;
 
-    if (!(buffer = HeapAlloc( GetProcessHeap(), 0, key_orig->secret_len ))) return STATUS_NO_MEMORY;
-    memcpy( buffer, key_orig->secret, key_orig->secret_len );
-
     key_copy->hdr           = key_orig->hdr;
     key_copy->alg_id        = key_orig->alg_id;
-    key_copy->mode          = key_orig->mode;
-    key_copy->block_size    = key_orig->block_size;
-    key_copy->handle        = NULL;
-    key_copy->secret        = buffer;
-    key_copy->secret_len    = key_orig->secret_len;
 
+    if (key_is_symmetric(key_orig))
+    {
+        if (!(buffer = HeapAlloc( GetProcessHeap(), 0, key_orig->u.s.secret_len ))) return STATUS_NO_MEMORY;
+        memcpy( buffer, key_orig->u.s.secret, key_orig->u.s.secret_len );
+
+        key_copy->u.s.mode          = key_orig->u.s.mode;
+        key_copy->u.s.block_size    = key_orig->u.s.block_size;
+        key_copy->u.s.handle        = NULL;
+        key_copy->u.s.secret        = buffer;
+        key_copy->u.s.secret_len    = key_orig->u.s.secret_len;
+
+        return STATUS_SUCCESS;
+    }
+    else
+    {
+        return STATUS_NOT_IMPLEMENTED;
+    }
+}
+
+static NTSTATUS key_symmetric_get_mode( struct key *key, enum mode_id *mode )
+{
+    *mode = key->u.s.mode;
+    return STATUS_SUCCESS;
+}
+
+static NTSTATUS key_symmetric_get_blocksize( struct key *key, ULONG *size )
+{
+    *size = key->u.s.block_size;
     return STATUS_SUCCESS;
 }
 
@@ -956,19 +995,22 @@ static NTSTATUS set_key_property( struct key *key, const WCHAR *prop, UCHAR *val
 {
     if (!strcmpW( prop, BCRYPT_CHAINING_MODE ))
     {
+        if (!key_is_symmetric(key))
+            return STATUS_NOT_SUPPORTED;
+
         if (!strncmpW( (WCHAR *)value, BCRYPT_CHAIN_MODE_ECB, size ))
         {
-            key->mode = MODE_ID_ECB;
+            key->u.s.mode = MODE_ID_ECB;
             return STATUS_SUCCESS;
         }
         else if (!strncmpW( (WCHAR *)value, BCRYPT_CHAIN_MODE_CBC, size ))
         {
-            key->mode = MODE_ID_CBC;
+            key->u.s.mode = MODE_ID_CBC;
             return STATUS_SUCCESS;
         }
         else if (!strncmpW( (WCHAR *)value, BCRYPT_CHAIN_MODE_GCM, size ))
         {
-            key->mode = MODE_ID_GCM;
+            key->u.s.mode = MODE_ID_GCM;
             return STATUS_SUCCESS;
         }
         else
@@ -988,22 +1030,22 @@ static gnutls_cipher_algorithm_t get_gnutls_cipher( const struct key *key )
     {
     case ALG_ID_AES:
         WARN( "handle block size\n" );
-        switch (key->mode)
+        switch (key->u.s.mode)
         {
             case MODE_ID_GCM:
-                if (key->secret_len == 16) return GNUTLS_CIPHER_AES_128_GCM;
-                if (key->secret_len == 32) return GNUTLS_CIPHER_AES_256_GCM;
+                if (key->u.s.secret_len == 16) return GNUTLS_CIPHER_AES_128_GCM;
+                if (key->u.s.secret_len == 32) return GNUTLS_CIPHER_AES_256_GCM;
                 break;
             case MODE_ID_ECB: /* can be emulated with CBC + empty IV */
             case MODE_ID_CBC:
-                if (key->secret_len == 16) return GNUTLS_CIPHER_AES_128_CBC;
-                if (key->secret_len == 24) return GNUTLS_CIPHER_AES_192_CBC;
-                if (key->secret_len == 32) return GNUTLS_CIPHER_AES_256_CBC;
+                if (key->u.s.secret_len == 16) return GNUTLS_CIPHER_AES_128_CBC;
+                if (key->u.s.secret_len == 24) return GNUTLS_CIPHER_AES_192_CBC;
+                if (key->u.s.secret_len == 32) return GNUTLS_CIPHER_AES_256_CBC;
                 break;
             default:
                 break;
         }
-        FIXME( "aes mode %u with key length %u not supported\n", key->mode, key->secret_len );
+        FIXME( "aes mode %u with key length %u not supported\n", key->u.s.mode, key->u.s.secret_len );
         return GNUTLS_CIPHER_UNKNOWN;
     default:
         FIXME( "algorithm %u not supported\n", key->alg_id );
@@ -1011,17 +1053,17 @@ static gnutls_cipher_algorithm_t get_gnutls_cipher( const struct key *key )
     }
 }
 
-static NTSTATUS key_set_params( struct key *key, UCHAR *iv, ULONG iv_len )
+static NTSTATUS key_symmetric_set_params( struct key *key, UCHAR *iv, ULONG iv_len )
 {
     static const UCHAR zero_iv[16];
     gnutls_cipher_algorithm_t cipher;
     gnutls_datum_t secret, vector;
     int ret;
 
-    if (key->handle)
+    if (key->u.s.handle)
     {
-        pgnutls_cipher_deinit( key->handle );
-        key->handle = NULL;
+        pgnutls_cipher_deinit( key->u.s.handle );
+        key->u.s.handle = NULL;
     }
 
     if ((cipher = get_gnutls_cipher( key )) == GNUTLS_CIPHER_UNKNOWN)
@@ -1033,12 +1075,12 @@ static NTSTATUS key_set_params( struct key *key, UCHAR *iv, ULONG iv_len )
         iv_len  = sizeof(zero_iv);
     }
 
-    secret.data = key->secret;
-    secret.size = key->secret_len;
+    secret.data = key->u.s.secret;
+    secret.size = key->u.s.secret_len;
     vector.data = iv;
     vector.size = iv_len;
 
-    if ((ret = pgnutls_cipher_init( &key->handle, cipher, &secret, &vector )))
+    if ((ret = pgnutls_cipher_init( &key->u.s.handle, cipher, &secret, &vector )))
     {
         pgnutls_perror( ret );
         return STATUS_INTERNAL_ERROR;
@@ -1047,11 +1089,11 @@ static NTSTATUS key_set_params( struct key *key, UCHAR *iv, ULONG iv_len )
     return STATUS_SUCCESS;
 }
 
-static NTSTATUS key_set_auth_data( struct key *key, UCHAR *auth_data, ULONG len )
+static NTSTATUS key_symmetric_set_auth_data( struct key *key, UCHAR *auth_data, ULONG len )
 {
     int ret;
 
-    if ((ret = pgnutls_cipher_add_auth( key->handle, auth_data, len )))
+    if ((ret = pgnutls_cipher_add_auth( key->u.s.handle , auth_data, len )))
     {
         pgnutls_perror( ret );
         return STATUS_INTERNAL_ERROR;
@@ -1060,12 +1102,12 @@ static NTSTATUS key_set_auth_data( struct key *key, UCHAR *auth_data, ULONG len
     return STATUS_SUCCESS;
 }
 
-static NTSTATUS key_encrypt( struct key *key, const UCHAR *input, ULONG input_len, UCHAR *output,
+static NTSTATUS key_symmetric_encrypt( struct key *key, const UCHAR *input, ULONG input_len, UCHAR *output,
                              ULONG output_len )
 {
     int ret;
 
-    if ((ret = pgnutls_cipher_encrypt2( key->handle, input, input_len, output, output_len )))
+    if ((ret = pgnutls_cipher_encrypt2( key->u.s.handle, input, input_len, output, output_len )))
     {
         pgnutls_perror( ret );
         return STATUS_INTERNAL_ERROR;
@@ -1074,12 +1116,12 @@ static NTSTATUS key_encrypt( struct key *key, const UCHAR *input, ULONG input_le
     return STATUS_SUCCESS;
 }
 
-static NTSTATUS key_decrypt( struct key *key, const UCHAR *input, ULONG input_len, UCHAR *output,
+static NTSTATUS key_symmetric_decrypt( struct key *key, const UCHAR *input, ULONG input_len, UCHAR *output,
                              ULONG output_len  )
 {
     int ret;
 
-    if ((ret = pgnutls_cipher_decrypt2( key->handle, input, input_len, output, output_len )))
+    if ((ret = pgnutls_cipher_decrypt2( key->u.s.handle, input, input_len, output, output_len )))
     {
         pgnutls_perror( ret );
         return STATUS_INTERNAL_ERROR;
@@ -1088,11 +1130,11 @@ static NTSTATUS key_decrypt( struct key *key, const UCHAR *input, ULONG input_le
     return STATUS_SUCCESS;
 }
 
-static NTSTATUS key_get_tag( struct key *key, UCHAR *tag, ULONG len )
+static NTSTATUS key_symmetric_get_tag( struct key *key, UCHAR *tag, ULONG len )
 {
     int ret;
 
-    if ((ret = pgnutls_cipher_tag( key->handle, tag, len )))
+    if ((ret = pgnutls_cipher_tag( key->u.s.handle, tag, len )))
     {
         pgnutls_perror( ret );
         return STATUS_INTERNAL_ERROR;
@@ -1101,18 +1143,22 @@ static NTSTATUS key_get_tag( struct key *key, UCHAR *tag, ULONG len )
     return STATUS_SUCCESS;
 }
 
-static NTSTATUS key_get_secret( struct key *key, UCHAR **secret, ULONG *len )
+static NTSTATUS key_symmetric_get_secret( struct key *key, UCHAR **secret, ULONG *len )
 {
-    *secret = key->secret;
-    *len = key->secret_len;
+    *secret = key->u.s.secret;
+    *len = key->u.s.secret_len;
     return STATUS_SUCCESS;
 }
 
 static NTSTATUS key_destroy( struct key *key )
 {
-    if (key->handle) pgnutls_cipher_deinit( key->handle );
-    heap_free( key->secret );
+    if (key_is_symmetric(key))
+    {
+        if (key->u.s.handle) pgnutls_cipher_deinit( key->u.s.handle );
+        heap_free( key->u.s.secret );
+    }
     heap_free( key );
+
     return STATUS_SUCCESS;
 }
 #elif defined(HAVE_COMMONCRYPTO_COMMONCRYPTOR_H) && MAC_OS_X_VERSION_MAX_ALLOWED >= 1080
@@ -1231,59 +1277,80 @@ struct key
     ULONG         block_size;
 };
 
-static NTSTATUS key_init( struct key *key, struct algorithm *alg, UCHAR *secret, ULONG secret_len )
+static inline BOOL key_is_symmetric( struct key *key )
+{
+    ERR( "support for keys not available at build time\n" );
+    return FALSE;
+}
+
+static inline BOOL key_is_asymmetric( struct key *key )
+{
+    ERR( "support for keys not available at build time\n" );
+};
+
+static NTSTATUS key_symmetric_init( struct key *key, struct algorithm *alg, UCHAR *secret, ULONG secret_len )
 {
     ERR( "support for keys not available at build time\n" );
-    key->mode = MODE_ID_CBC;
     return STATUS_NOT_IMPLEMENTED;
 }
 
 static NTSTATUS key_duplicate( struct key *key_orig, struct key *key_copy )
 {
+     ERR( "support for keys not available at build time\n" );
+    return STATUS_NOT_IMPLEMENTED;
+}
+
+static NTSTATUS key_symmetric_get_mode( struct key *key, enum mode_id *mode )
+{
     ERR( "support for keys not available at build time\n" );
-    key_copy->mode = MODE_ID_CBC;
     return STATUS_NOT_IMPLEMENTED;
 }
 
+static NTSTATUS key_symmetric_get_blocksize( struct key *key, ULONG *size )
+{
+    ERR( "support for keys not available at build time\n" );
+}
+
+
 static NTSTATUS set_key_property( struct key *key, const WCHAR *prop, UCHAR *value, ULONG size, ULONG flags )
 {
     ERR( "support for keys not available at build time\n" );
     return STATUS_NOT_IMPLEMENTED;
 }
 
-static NTSTATUS key_set_params( struct key *key, UCHAR *iv, ULONG iv_len )
+static NTSTATUS key_symmetric_set_params( struct key *key, UCHAR *iv, ULONG iv_len )
 {
     ERR( "support for keys not available at build time\n" );
     return STATUS_NOT_IMPLEMENTED;
 }
 
-static NTSTATUS key_set_auth_data( struct key *key, UCHAR *auth_data, ULONG len )
+static NTSTATUS key_symmetric_set_auth_data( struct key *key, UCHAR *auth_data, ULONG len )
 {
     ERR( "support for keys not available at build time\n" );
     return STATUS_NOT_IMPLEMENTED;
 }
 
-static NTSTATUS key_encrypt( struct key *key, const UCHAR *input, ULONG input_len, UCHAR *output,
+static NTSTATUS key_symmetric_encrypt( struct key *key, const UCHAR *input, ULONG input_len, UCHAR *output,
                              ULONG output_len  )
 {
     ERR( "support for keys not available at build time\n" );
     return STATUS_NOT_IMPLEMENTED;
 }
 
-static NTSTATUS key_decrypt( struct key *key, const UCHAR *input, ULONG input_len, UCHAR *output,
+static NTSTATUS key_symmetric_decrypt( struct key *key, const UCHAR *input, ULONG input_len, UCHAR *output,
                              ULONG output_len )
 {
     ERR( "support for keys not available at build time\n" );
     return STATUS_NOT_IMPLEMENTED;
 }
 
-static NTSTATUS key_get_tag( struct key *key, UCHAR *tag, ULONG len )
+static NTSTATUS key_symmetric_get_tag( struct key *key, UCHAR *tag, ULONG len )
 {
     ERR( "support for keys not available at build time\n" );
     return STATUS_NOT_IMPLEMENTED;
 }
 
-static NTSTATUS key_get_secret( struct key *key, UCHAR **secret, ULONG *len )
+static NTSTATUS key_symmetric_get_secret( struct key *key, UCHAR **secret, ULONG *len )
 {
     ERR( "support for keys not available at build time\n" );
     return STATUS_NOT_IMPLEMENTED;
@@ -1318,7 +1385,7 @@ NTSTATUS WINAPI BCryptGenerateSymmetricKey( BCRYPT_ALG_HANDLE algorithm, BCRYPT_
 
     key->hdr.magic = MAGIC_KEY;
 
-    if ((status = key_init( key, alg, secret, secret_len )))
+    if ((status = key_symmetric_init( key, alg, secret, secret_len )))
     {
         heap_free( key );
         *handle = NULL;
@@ -1415,13 +1482,19 @@ NTSTATUS WINAPI BCryptExportKey( BCRYPT_KEY_HANDLE export_key, BCRYPT_KEY_HANDLE
     if (!key || key->hdr.magic != MAGIC_KEY) return STATUS_INVALID_HANDLE;
     if (!output || !output_len || !size) return STATUS_INVALID_PARAMETER;
 
+    if (!key_is_symmetric(key))
+    {
+        FIXME( "export of asymmetric keys not yet supported\n");
+        return STATUS_NOT_IMPLEMENTED;
+    }
+
     if (encrypt_key)
     {
         FIXME( "encryption of key not yet supported\n" );
         return STATUS_NOT_IMPLEMENTED;
     }
 
-    if ((status = key_get_secret( key, &secret, &secret_len )))
+    if ((status = key_symmetric_get_secret( key, &secret, &secret_len )))
         return status;
 
     if (!strcmpW( type, BCRYPT_KEY_DATA_BLOB ))
@@ -1462,19 +1535,30 @@ NTSTATUS WINAPI BCryptEncrypt( BCRYPT_KEY_HANDLE handle, UCHAR *input, ULONG inp
     struct key *key = handle;
     ULONG bytes_left = input_len;
     UCHAR *buf, *src, *dst;
+    enum mode_id mode;
+    ULONG block_size;
     NTSTATUS status;
 
     TRACE( "%p, %p, %u, %p, %p, %u, %p, %u, %p, %08x\n", handle, input, input_len,
            padding, iv, iv_len, output, output_len, ret_len, flags );
 
     if (!key || key->hdr.magic != MAGIC_KEY) return STATUS_INVALID_HANDLE;
+
+    if (!key_is_symmetric(key))
+    {
+        FIXME( "encryption with asymmetric keys not yet supported\n");
+        return STATUS_NOT_IMPLEMENTED;
+    }
+
     if (flags & ~BCRYPT_BLOCK_PADDING)
     {
         FIXME( "flags %08x not implemented\n", flags );
         return STATUS_NOT_IMPLEMENTED;
     }
 
-    if (key->mode == MODE_ID_GCM)
+    if ((status = key_symmetric_get_mode( key, &mode ))) return status;
+
+    if (mode == MODE_ID_GCM)
     {
         BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO *auth_info = padding;
 
@@ -1485,7 +1569,7 @@ NTSTATUS WINAPI BCryptEncrypt( BCRYPT_KEY_HANDLE handle, UCHAR *input, ULONG inp
         if (auth_info->dwFlags & BCRYPT_AUTH_MODE_CHAIN_CALLS_FLAG)
             FIXME( "call chaining not implemented\n" );
 
-        if ((status = key_set_params( key, auth_info->pbNonce, auth_info->cbNonce )))
+        if ((status = key_symmetric_set_params( key, auth_info->pbNonce, auth_info->cbNonce )))
             return status;
 
         *ret_len = input_len;
@@ -1493,46 +1577,48 @@ NTSTATUS WINAPI BCryptEncrypt( BCRYPT_KEY_HANDLE handle, UCHAR *input, ULONG inp
         if (input && !output) return STATUS_SUCCESS;
         if (output_len < *ret_len) return STATUS_BUFFER_TOO_SMALL;
 
-        if (auth_info->pbAuthData && (status = key_set_auth_data( key, auth_info->pbAuthData, auth_info->cbAuthData )))
+        if (auth_info->pbAuthData && (status = key_symmetric_set_auth_data( key, auth_info->pbAuthData, auth_info->cbAuthData )))
             return status;
-        if ((status = key_encrypt( key, input, input_len, output, output_len )))
+        if ((status = key_symmetric_encrypt( key, input, input_len, output, output_len )))
             return status;
 
-        return key_get_tag( key, auth_info->pbTag, auth_info->cbTag );
+        return key_symmetric_get_tag( key, auth_info->pbTag, auth_info->cbTag );
     }
 
-    if ((status = key_set_params( key, iv, iv_len ))) return status;
+    if ((status = key_symmetric_set_params( key, iv, iv_len ))) return status;
+    if ((status = key_symmetric_get_blocksize( key, &block_size ))) return status;
+
 
     *ret_len = input_len;
 
     if (flags & BCRYPT_BLOCK_PADDING)
-        *ret_len = (input_len + key->block_size) & ~(key->block_size - 1);
-    else if (input_len & (key->block_size - 1))
+        *ret_len = (input_len + block_size) & ~(block_size - 1);
+    else if (input_len & (block_size - 1))
         return STATUS_INVALID_BUFFER_SIZE;
 
     if (!output) return STATUS_SUCCESS;
     if (output_len < *ret_len) return STATUS_BUFFER_TOO_SMALL;
 
-    if (key->mode == MODE_ID_ECB && iv)
+    if (mode == MODE_ID_ECB && iv)
         return STATUS_INVALID_PARAMETER;
 
     src = input;
     dst = output;
-    while (bytes_left >= key->block_size)
+    while (bytes_left >= block_size)
     {
-        if ((status = key_encrypt( key, src, key->block_size, dst, key->block_size ))) return status;
-        if (key->mode == MODE_ID_ECB && (status = key_set_params( key, iv, iv_len ))) return status;
-        bytes_left -= key->block_size;
-        src += key->block_size;
-        dst += key->block_size;
+        if ((status = key_symmetric_encrypt( key, src, block_size, dst, block_size ))) return status;
+        if (mode == MODE_ID_ECB && (status = key_symmetric_set_params( key, iv, iv_len ))) return status;
+        bytes_left -= block_size;
+        src += block_size;
+        dst += block_size;
     }
 
     if (flags & BCRYPT_BLOCK_PADDING)
     {
-        if (!(buf = heap_alloc( key->block_size ))) return STATUS_NO_MEMORY;
+        if (!(buf = heap_alloc( block_size ))) return STATUS_NO_MEMORY;
         memcpy( buf, src, bytes_left );
-        memset( buf + bytes_left, key->block_size - bytes_left, key->block_size - bytes_left );
-        status = key_encrypt( key, buf, key->block_size, dst, key->block_size );
+        memset( buf + bytes_left, block_size - bytes_left, block_size - bytes_left );
+        status = key_symmetric_encrypt( key, buf, block_size, dst, block_size );
         heap_free( buf );
     }
 
@@ -1546,19 +1632,30 @@ NTSTATUS WINAPI BCryptDecrypt( BCRYPT_KEY_HANDLE handle, UCHAR *input, ULONG inp
     struct key *key = handle;
     ULONG bytes_left = input_len;
     UCHAR *buf, *src, *dst;
+    enum mode_id mode;
+    ULONG block_size;
     NTSTATUS status;
 
     TRACE( "%p, %p, %u, %p, %p, %u, %p, %u, %p, %08x\n", handle, input, input_len,
            padding, iv, iv_len, output, output_len, ret_len, flags );
 
     if (!key || key->hdr.magic != MAGIC_KEY) return STATUS_INVALID_HANDLE;
+
+    if (!key_is_symmetric(key))
+    {
+        FIXME( "decryption with asymmetric keys not yet supported\n");
+        return STATUS_NOT_IMPLEMENTED;
+    }
+
     if (flags & ~BCRYPT_BLOCK_PADDING)
     {
         FIXME( "flags %08x not supported\n", flags );
         return STATUS_NOT_IMPLEMENTED;
     }
 
-    if (key->mode == MODE_ID_GCM)
+    if ((status = key_symmetric_get_mode( key, &mode ))) return status;
+
+    if (mode == MODE_ID_GCM)
     {
         BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO *auth_info = padding;
         UCHAR tag[16];
@@ -1568,7 +1665,7 @@ NTSTATUS WINAPI BCryptDecrypt( BCRYPT_KEY_HANDLE handle, UCHAR *input, ULONG inp
         if (!auth_info->pbTag) return STATUS_INVALID_PARAMETER;
         if (auth_info->cbTag < 12 || auth_info->cbTag > 16) return STATUS_INVALID_PARAMETER;
 
-        if ((status = key_set_params( key, auth_info->pbNonce, auth_info->cbNonce )))
+        if ((status = key_symmetric_set_params( key, auth_info->pbNonce, auth_info->cbNonce )))
             return status;
 
         *ret_len = input_len;
@@ -1576,12 +1673,12 @@ NTSTATUS WINAPI BCryptDecrypt( BCRYPT_KEY_HANDLE handle, UCHAR *input, ULONG inp
         if (!output) return STATUS_SUCCESS;
         if (output_len < *ret_len) return STATUS_BUFFER_TOO_SMALL;
 
-        if (auth_info->pbAuthData && (status = key_set_auth_data( key, auth_info->pbAuthData, auth_info->cbAuthData )))
+        if (auth_info->pbAuthData && (status = key_symmetric_set_auth_data( key, auth_info->pbAuthData, auth_info->cbAuthData )))
             return status;
-        if ((status = key_decrypt( key, input, input_len, output, output_len )))
+        if ((status = key_symmetric_decrypt( key, input, input_len, output, output_len )))
             return status;
 
-        if ((status = key_get_tag( key, tag, sizeof(tag) )))
+        if ((status = key_symmetric_get_tag( key, tag, sizeof(tag) )))
             return status;
         if (memcmp( tag, auth_info->pbTag, auth_info->cbTag ))
             return STATUS_AUTH_TAG_MISMATCH;
@@ -1589,44 +1686,45 @@ NTSTATUS WINAPI BCryptDecrypt( BCRYPT_KEY_HANDLE handle, UCHAR *input, ULONG inp
         return STATUS_SUCCESS;
     }
 
-    if ((status = key_set_params( key, iv, iv_len ))) return status;
+    if ((status = key_symmetric_set_params( key, iv, iv_len ))) return status;
+    if ((status = key_symmetric_get_blocksize( key, &block_size ))) return status;
 
     *ret_len = input_len;
 
-    if (input_len & (key->block_size - 1)) return STATUS_INVALID_BUFFER_SIZE;
+    if (input_len & (block_size - 1)) return STATUS_INVALID_BUFFER_SIZE;
     if (!output) return STATUS_SUCCESS;
     if (flags & BCRYPT_BLOCK_PADDING)
     {
-        if (output_len + key->block_size < *ret_len) return STATUS_BUFFER_TOO_SMALL;
-        if (input_len < key->block_size) return STATUS_BUFFER_TOO_SMALL;
-        bytes_left -= key->block_size;
+        if (output_len + block_size < *ret_len) return STATUS_BUFFER_TOO_SMALL;
+        if (input_len < block_size) return STATUS_BUFFER_TOO_SMALL;
+        bytes_left -= block_size;
     }
     else if (output_len < *ret_len)
         return STATUS_BUFFER_TOO_SMALL;
 
-    if (key->mode == MODE_ID_ECB && iv)
+    if (mode == MODE_ID_ECB && iv)
         return STATUS_INVALID_PARAMETER;
 
     src = input;
     dst = output;
-    while (bytes_left >= key->block_size)
+    while (bytes_left >= block_size)
     {
-        if ((status = key_decrypt( key, src, key->block_size, dst, key->block_size ))) return status;
-        if (key->mode == MODE_ID_ECB && (status = key_set_params( key, iv, iv_len ))) return status;
-        bytes_left -= key->block_size;
-        src += key->block_size;
-        dst += key->block_size;
+        if ((status = key_symmetric_decrypt( key, src, block_size, dst, block_size ))) return status;
+        if (mode == MODE_ID_ECB && (status = key_symmetric_set_params( key, iv, iv_len ))) return status;
+        bytes_left -= block_size;
+        src += block_size;
+        dst += block_size;
     }
 
     if (flags & BCRYPT_BLOCK_PADDING)
     {
-        if (!(buf = heap_alloc( key->block_size ))) return STATUS_NO_MEMORY;
-        status = key_decrypt( key, src, key->block_size, buf, key->block_size );
-        if (!status && buf[ key->block_size - 1 ] <= key->block_size)
+        if (!(buf = heap_alloc( block_size ))) return STATUS_NO_MEMORY;
+        status = key_symmetric_decrypt( key, src, block_size, buf, block_size );
+        if (!status && buf[ block_size - 1 ] <= block_size)
         {
-            *ret_len -= buf[ key->block_size - 1 ];
+            *ret_len -= buf[ block_size - 1 ];
             if (output_len < *ret_len) status = STATUS_BUFFER_TOO_SMALL;
-            else memcpy( dst, buf, key->block_size - buf[ key->block_size - 1 ] );
+            else memcpy( dst, buf, block_size - buf[ block_size - 1 ] );
         }
         else
             status = STATUS_UNSUCCESSFUL; /* FIXME: invalid padding */
-- 
1.9.1

