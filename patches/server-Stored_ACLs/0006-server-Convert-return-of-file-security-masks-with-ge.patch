From 20110e2294539cba86a259a6b5fc6749f2e5cdd4 Mon Sep 17 00:00:00 2001
From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
Date: Fri, 18 Apr 2014 14:05:32 -0600
Subject: server: Convert return of file security masks with generic access
 mappings. (try 7)

---
 dlls/advapi32/tests/security.c | 16 ++++++++--------
 server/file.c                  | 22 ++++++++++++++++++++++
 2 files changed, 30 insertions(+), 8 deletions(-)

diff --git a/dlls/advapi32/tests/security.c b/dlls/advapi32/tests/security.c
index 3457fbc..c256753 100644
--- a/dlls/advapi32/tests/security.c
+++ b/dlls/advapi32/tests/security.c
@@ -3197,8 +3197,8 @@ static void test_CreateDirectoryA(void)
         ok(((ACE_HEADER *)ace)->AceFlags == (OBJECT_INHERIT_ACE|CONTAINER_INHERIT_ACE),
                 "Current User ACE has unexpected flags (0x%x != 0x03)\n",
                 ((ACE_HEADER *)ace)->AceFlags);
-        todo_wine ok(ace->Mask == 0x1f01ff,
-                     "Current User ACE has unexpected mask (0x%x != 0x1f01ff)\n", ace->Mask);
+        ok(ace->Mask == 0x1f01ff, "Current User ACE has unexpected mask (0x%x != 0x1f01ff)\n",
+                                  ace->Mask);
     }
     if (acl_size.AceCount > 1)
     {
@@ -3209,8 +3209,8 @@ static void test_CreateDirectoryA(void)
         ok(((ACE_HEADER *)ace)->AceFlags == (OBJECT_INHERIT_ACE|CONTAINER_INHERIT_ACE),
                 "Administators Group ACE has unexpected flags (0x%x != 0x03)\n",
                 ((ACE_HEADER *)ace)->AceFlags);
-        todo_wine ok(ace->Mask == 0x1f01ff,
-                     "Administators Group ACE has unexpected mask (0x%x != 0x1f01ff)\n", ace->Mask);
+        ok(ace->Mask == 0x1f01ff, "Administators Group ACE has unexpected mask (0x%x != 0x1f01ff)\n",
+                                  ace->Mask);
     }
     LocalFree(pSD);
 
@@ -3389,8 +3389,8 @@ static void test_GetNamedSecurityInfoA(void)
         ok(bret, "Current User ACE != Current User SID.\n");
         ok(((ACE_HEADER *)ace)->AceFlags == 0,
            "Current User ACE has unexpected flags (0x%x != 0x0)\n", ((ACE_HEADER *)ace)->AceFlags);
-        todo_wine ok(ace->Mask == 0x1f01ff,
-                     "Current User ACE has unexpected mask (0x%x != 0x1f01ff)\n", ace->Mask);
+        ok(ace->Mask == 0x1f01ff, "Current User ACE has unexpected mask (0x%x != 0x1f01ff)\n",
+                                  ace->Mask);
     }
     if (acl_size.AceCount > 1)
     {
@@ -3400,8 +3400,8 @@ static void test_GetNamedSecurityInfoA(void)
         ok(bret || broken(!bret) /* win2k */, "Administators Group ACE != Administators Group SID.\n");
         ok(((ACE_HEADER *)ace)->AceFlags == 0,
            "Administators Group ACE has unexpected flags (0x%x != 0x0)\n", ((ACE_HEADER *)ace)->AceFlags);
-        todo_wine ok(ace->Mask == 0x1f01ff || broken(ace->Mask == GENERIC_ALL) /* win2k */,
-                     "Administators Group ACE has unexpected mask (0x%x != 0x1f01ff)\n", ace->Mask);
+        ok(ace->Mask == 0x1f01ff || broken(ace->Mask == GENERIC_ALL) /* win2k */,
+           "Administators Group ACE has unexpected mask (0x%x != 0x1f01ff)\n", ace->Mask);
     }
     LocalFree(pSD);
 
diff --git a/server/file.c b/server/file.c
index 33f9483..a50276e 100644
--- a/server/file.c
+++ b/server/file.c
@@ -522,6 +522,27 @@ struct security_descriptor *get_xattr_sd( int fd )
     return sd;
 }
 
+/* Convert generic rights into standard access rights */
+void convert_generic_sd( struct security_descriptor *sd )
+{
+    const ACL *dacl;
+    int present;
+
+    dacl = sd_get_dacl( sd, &present );
+    if (present && dacl)
+    {
+        const ACE_HEADER *ace = (const ACE_HEADER *)(dacl + 1);
+        ULONG i;
+
+        for (i = 0; i < dacl->AceCount; i++, ace = ace_next( ace ))
+        {
+            DWORD *mask = (DWORD *)(ace + 1);
+
+            *mask = generic_file_map_access( *mask );
+        }
+    }
+}
+
 struct security_descriptor *get_file_sd( struct object *obj, struct fd *fd, mode_t *mode,
                                          uid_t *uid )
 {
@@ -538,6 +559,7 @@ struct security_descriptor *get_file_sd( struct object *obj, struct fd *fd, mode
         return obj->sd;
 
     sd = get_xattr_sd( unix_fd );
+    if (sd) convert_generic_sd( sd );
     if (!sd) sd = mode_to_sd( st.st_mode,
                               security_unix_uid_to_sid( st.st_uid ),
                               token_get_primary_group( current->process->token ));
-- 
2.3.3

