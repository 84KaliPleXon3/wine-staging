From 52803bac152d1f9d8af2de718c1fa89047487991 Mon Sep 17 00:00:00 2001
From: Louis Lenders <xerox.xerox2000x@gmail.com>
Date: Thu, 7 Jun 2018 11:51:01 +0200
Subject: [PATCH] uianimation: Add stub dll

Reordered code to stop the need of forwards declare.
Removed private header.
Split into multiple changes.

Signed-off-by: Louis Lenders <xerox.xerox2000x@gmail.com>
---
 dlls/uianimation/Makefile.in |   3 +-
 dlls/uianimation/main.c      | 461 +++++++++++++++++++++++++++++++++--
 2 files changed, 446 insertions(+), 18 deletions(-)

diff --git a/dlls/uianimation/Makefile.in b/dlls/uianimation/Makefile.in
index d492faabde8..886898070c9 100644
--- a/dlls/uianimation/Makefile.in
+++ b/dlls/uianimation/Makefile.in
@@ -1,5 +1,5 @@
 MODULE    = uianimation.dll
-IMPORTS   = uuid
+IMPORTS   = uuid ole32
 
 EXTRADLLFLAGS = -mno-cygwin
 
@@ -9,3 +9,4 @@ C_SRCS = \
 IDL_SRCS = \
 	uianimation_reg.idl \
 	uianimation_typelib.idl
+
diff --git a/dlls/uianimation/main.c b/dlls/uianimation/main.c
index 3f1c6a182bb..643a5aeea82 100644
--- a/dlls/uianimation/main.c
+++ b/dlls/uianimation/main.c
@@ -21,6 +21,8 @@
 
 #include <stdarg.h>
 
+#define COBJMACROS
+
 #include "windef.h"
 #include "winbase.h"
 #include "objbase.h"
@@ -38,22 +40,6 @@ WINE_DEFAULT_DEBUG_CHANNEL(uianimation);
 
 static HINSTANCE hinstance;
 
-BOOL WINAPI DllMain( HINSTANCE dll, DWORD reason, LPVOID reserved )
-{
-    TRACE("(%p %d %p)\n", dll, reason, reserved);
-
-    switch (reason)
-    {
-    case DLL_WINE_PREATTACH:
-        return FALSE;  /* prefer native version */
-    case DLL_PROCESS_ATTACH:
-        hinstance = dll;
-        DisableThreadLibraryCalls( dll );
-        break;
-    }
-    return TRUE;
-}
-
 struct class_factory
 {
     IClassFactory IClassFactory_iface;
@@ -65,7 +51,8 @@ static inline struct class_factory *impl_from_IClassFactory( IClassFactory *ifac
     return CONTAINING_RECORD( iface, struct class_factory, IClassFactory_iface );
 }
 
-static HRESULT WINAPI class_factory_QueryInterface( IClassFactory *iface, REFIID iid, void **obj )
+static HRESULT WINAPI class_factory_QueryInterface( IClassFactory *iface,
+                                                    REFIID iid, void **obj )
 {
     if (IsEqualIID( iid, &IID_IUnknown ) ||
         IsEqualIID( iid, &IID_IClassFactory ))
@@ -118,6 +105,440 @@ static const struct IClassFactoryVtbl class_factory_vtbl =
     class_factory_LockServer
 };
 
+/***********************************************************************
+ *          IUIAnimationTransitionFactory
+ */
+struct tr_factory
+{
+    IUIAnimationTransitionFactory IUIAnimationTransitionFactory_iface;
+    LONG ref;
+};
+
+struct tr_factory *impl_from_IUIAnimationTransitionFactory( IUIAnimationTransitionFactory *iface )
+{
+    return CONTAINING_RECORD( iface, struct tr_factory, IUIAnimationTransitionFactory_iface );
+}
+
+static HRESULT WINAPI tr_factory_QueryInterface( IUIAnimationTransitionFactory *iface,
+                                                 REFIID iid, void **obj )
+{
+    struct tr_factory *This = impl_from_IUIAnimationTransitionFactory( iface );
+
+    TRACE( "(%p)->(%s %p)\n", This, debugstr_guid( iid ), obj );
+
+    if (IsEqualIID( iid, &IID_IUnknown ) ||
+        IsEqualIID( iid, &IID_IUIAnimationTransitionFactory ))
+    {
+        IUIAnimationTransitionFactory_AddRef( iface );
+        *obj = iface;
+        return S_OK;
+    }
+
+    FIXME( "interface %s not implemented\n", debugstr_guid( iid ) );
+    *obj = NULL;
+    return E_NOINTERFACE;
+}
+
+static ULONG WINAPI tr_factory_AddRef( IUIAnimationTransitionFactory *iface )
+{
+    struct tr_factory *This = impl_from_IUIAnimationTransitionFactory( iface );
+    ULONG ref = InterlockedIncrement( &This->ref );
+
+    TRACE( "(%p) ref = %u\n", This, ref );
+    return ref;
+}
+
+static ULONG WINAPI tr_factory_Release( IUIAnimationTransitionFactory *iface )
+{
+    struct tr_factory *This = impl_from_IUIAnimationTransitionFactory( iface );
+    ULONG ref = InterlockedDecrement(&This->ref);
+
+    TRACE( "(%p) ref = %u\n", This, ref );
+
+    if (!ref)
+        heap_free( This );
+
+    return ref;
+}
+
+ static  HRESULT WINAPI tr_factory_CreateTransition(IUIAnimationTransitionFactory *iface,
+          IUIAnimationInterpolator *interpolator, IUIAnimationTransition **transition)
+{
+    struct tr_factory *This = impl_from_IUIAnimationTransitionFactory( iface );
+    FIXME( "stub (%p)->(  )\n", This );
+    return E_NOTIMPL;
+}
+
+const struct IUIAnimationTransitionFactoryVtbl tr_factory_vtbl =
+{
+    tr_factory_QueryInterface,
+    tr_factory_AddRef,
+    tr_factory_Release,
+    tr_factory_CreateTransition
+};
+
+HRESULT tr_factory_create( IUnknown *outer, REFIID iid, void **obj )
+{
+    struct tr_factory *This = heap_alloc( sizeof(*This) );
+    HRESULT hr;
+
+    if (!This) return E_OUTOFMEMORY;
+    This->IUIAnimationTransitionFactory_iface.lpVtbl = &tr_factory_vtbl;
+    This->ref = 1;
+
+    hr = IUIAnimationTransitionFactory_QueryInterface( &This->IUIAnimationTransitionFactory_iface, iid, obj );
+
+    IUIAnimationTransitionFactory_Release( &This->IUIAnimationTransitionFactory_iface );
+    return hr;
+}
+
+/***********************************************************************
+ *          IUIAnimationTransition
+ */
+struct animation_transition
+{
+    IUIAnimationTransition IUIAnimationTransition_iface;
+    LONG ref;
+};
+
+struct animation_transition *impl_from_IUIAnimationTransition( IUIAnimationTransition *iface )
+{
+    return CONTAINING_RECORD( iface, struct animation_transition, IUIAnimationTransition_iface );
+}
+
+static HRESULT WINAPI WINAPI animation_transition_QueryInterface( IUIAnimationTransition *iface,
+                                                 REFIID iid, void **obj )
+{
+    struct animation_transition *This = impl_from_IUIAnimationTransition( iface );
+
+    TRACE( "(%p)->(%s %p)\n", This, debugstr_guid( iid ), obj );
+
+    if (IsEqualIID( iid, &IID_IUnknown ) ||
+        IsEqualIID( iid, &IID_IUIAnimationTransition ))
+    {
+        IUIAnimationTransition_AddRef( iface );
+        *obj = iface;
+        return S_OK;
+    }
+
+    FIXME( "interface %s not implemented\n", debugstr_guid( iid ) );
+    *obj = NULL;
+    return E_NOINTERFACE;
+}
+
+static ULONG WINAPI animation_transition_AddRef( IUIAnimationTransition *iface )
+{
+    struct animation_transition *This = impl_from_IUIAnimationTransition( iface );
+    ULONG ref = InterlockedIncrement( &This->ref );
+
+    TRACE( "(%p) ref = %u\n", This, ref );
+    return ref;
+}
+
+static ULONG WINAPI animation_transition_Release( IUIAnimationTransition *iface )
+{
+    struct animation_transition *This = impl_from_IUIAnimationTransition( iface );
+    ULONG ref = InterlockedDecrement(&This->ref);
+
+    TRACE( "(%p) ref = %u\n", This, ref );
+
+    if (!ref)
+        heap_free( This );
+
+    return ref;
+}
+
+static HRESULT WINAPI animation_transition_SetInitialValue ( IUIAnimationTransition *iface, DOUBLE value)
+{
+    struct animation_transition *This = impl_from_IUIAnimationTransition( iface );
+    FIXME( "stub (%p)->(  )\n", This );
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI animation_transition_SetInitialVelocity (IUIAnimationTransition *iface,DOUBLE velocity)
+{
+    struct animation_transition *This = impl_from_IUIAnimationTransition( iface );
+    FIXME( "stub (%p)->(  )\n", This );
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI animation_transition_IsDurationKnown (IUIAnimationTransition *iface)
+{
+    struct animation_transition *This = impl_from_IUIAnimationTransition( iface );
+    FIXME( "stub (%p)->(  )\n", This );
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI animation_transition_GetDuration (IUIAnimationTransition *iface, UI_ANIMATION_SECONDS *duration)
+{
+    struct animation_transition *This = impl_from_IUIAnimationTransition( iface );
+    FIXME( "stub (%p)->(  )\n", This );
+    return E_NOTIMPL;
+}
+
+const struct IUIAnimationTransitionVtbl animation_transition_vtbl =
+{
+    animation_transition_QueryInterface,
+    animation_transition_AddRef,
+    animation_transition_Release,
+    animation_transition_SetInitialValue,
+    animation_transition_SetInitialVelocity,
+    animation_transition_IsDurationKnown,
+    animation_transition_GetDuration
+};
+
+HRESULT animation_transition_create( IUnknown *outer, REFIID iid, void **obj )
+{
+    struct animation_transition *This = heap_alloc( sizeof(*This) );
+    HRESULT hr;
+
+    if (!This) return E_OUTOFMEMORY;
+    This->IUIAnimationTransition_iface.lpVtbl = &animation_transition_vtbl;
+    This->ref = 1;
+
+    hr = IUIAnimationTransition_QueryInterface( &This->IUIAnimationTransition_iface, iid, obj );
+
+    IUIAnimationTransition_Release( &This->IUIAnimationTransition_iface );
+    return hr;
+}
+
+/***********************************************************************
+ *          IUITransitionLibrary
+ */
+struct tr_library
+{
+    IUIAnimationTransitionLibrary IUIAnimationTransitionLibrary_iface;
+    LONG ref;
+};
+
+struct tr_library *impl_from_IUIAnimationTransitionLibrary( IUIAnimationTransitionLibrary *iface )
+{
+    return CONTAINING_RECORD( iface, struct tr_library, IUIAnimationTransitionLibrary_iface );
+}
+
+static HRESULT WINAPI WINAPI tr_library_QueryInterface( IUIAnimationTransitionLibrary *iface,
+                                                 REFIID iid, void **obj )
+{
+    struct tr_library *This = impl_from_IUIAnimationTransitionLibrary( iface );
+
+    TRACE( "(%p)->(%s %p)\n", This, debugstr_guid( iid ), obj );
+
+    if (IsEqualIID( iid, &IID_IUnknown ) ||
+        IsEqualIID( iid, &IID_IUIAnimationTransitionLibrary ))
+    {
+        IUIAnimationTransitionLibrary_AddRef( iface );
+        *obj = iface;
+        return S_OK;
+    }
+
+    FIXME( "interface %s not implemented\n", debugstr_guid( iid ) );
+    *obj = NULL;
+    return E_NOINTERFACE;
+}
+
+static ULONG WINAPI tr_library_AddRef( IUIAnimationTransitionLibrary *iface )
+{
+    struct tr_library *This = impl_from_IUIAnimationTransitionLibrary( iface );
+    ULONG ref = InterlockedIncrement( &This->ref );
+
+    TRACE( "(%p) ref = %u\n", This, ref );
+    return ref;
+}
+
+static ULONG WINAPI tr_library_Release( IUIAnimationTransitionLibrary *iface )
+{
+    struct tr_library *This = impl_from_IUIAnimationTransitionLibrary( iface );
+    ULONG ref = InterlockedDecrement(&This->ref);
+
+    TRACE( "(%p) ref = %u\n", This, ref );
+
+    if (!ref)
+        heap_free( This );
+
+    return ref;
+}
+
+static HRESULT WINAPI tr_library_CreateInstantaneousTransition(IUIAnimationTransitionLibrary *iface,
+        double finalValue, IUIAnimationTransition **transition)
+{
+    struct tr_library *This = impl_from_IUIAnimationTransitionLibrary( iface );
+    struct animation_transition *tr = heap_alloc( sizeof(*tr) );
+    HRESULT hr;
+
+    FIXME( "stub (%p)->(  )\n", This );
+
+    if (!tr) return E_OUTOFMEMORY;
+    tr->IUIAnimationTransition_iface.lpVtbl = &animation_transition_vtbl;
+    tr->ref = 1;
+
+    hr = animation_transition_QueryInterface( &tr->IUIAnimationTransition_iface, &IID_IUIAnimationTransition, (void **)transition );
+
+    IUIAnimationTransition_Release( &tr->IUIAnimationTransition_iface );
+    return hr;
+}
+
+static HRESULT WINAPI tr_library_CreateConstantTransition(IUIAnimationTransitionLibrary *iface,
+        double duration, IUIAnimationTransition **transition)
+{
+    struct tr_library *This = impl_from_IUIAnimationTransitionLibrary( iface );
+    FIXME( "stub (%p)->(  )\n", This );
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI tr_library_CreateDiscreteTransition(IUIAnimationTransitionLibrary *iface,
+        double delay, double finalValue, double hold, IUIAnimationTransition **transition)
+{
+    struct tr_library *This = impl_from_IUIAnimationTransitionLibrary( iface );
+    FIXME( "stub (%p)->(  )\n", This );
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI tr_library_CreateLinearTransition(IUIAnimationTransitionLibrary *iface,
+        double duration, double finalValue, IUIAnimationTransition **transition)
+{
+    struct tr_library *This = impl_from_IUIAnimationTransitionLibrary( iface );
+    struct animation_transition *tr = heap_alloc( sizeof(*tr) );
+    HRESULT hr;
+
+    FIXME( "stub (%p)->(  )\n", This );
+
+    if (!tr) return E_OUTOFMEMORY;
+    tr->IUIAnimationTransition_iface.lpVtbl = &animation_transition_vtbl;
+    tr->ref = 1;
+
+    hr = animation_transition_QueryInterface( &tr->IUIAnimationTransition_iface, &IID_IUIAnimationTransition, (void **)transition );
+
+    IUIAnimationTransition_Release( &tr->IUIAnimationTransition_iface );
+    return hr;
+}
+
+static HRESULT WINAPI tr_library_CreateLinearTransitionFromSpeed(IUIAnimationTransitionLibrary *iface,
+        double speed, double finalValue, IUIAnimationTransition **transition)
+{
+    struct tr_library *This = impl_from_IUIAnimationTransitionLibrary( iface );
+    FIXME( "stub (%p)->(  )\n", This );
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI tr_library_CreateSinusoidalTransitionFromVelocity(IUIAnimationTransitionLibrary *iface,
+        double duration, double period, IUIAnimationTransition **transition)
+{
+    struct tr_library *This = impl_from_IUIAnimationTransitionLibrary( iface );
+    FIXME( "stub (%p)->(  )\n", This );
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI tr_library_CreateSinusoidalTransitionFromRange(IUIAnimationTransitionLibrary *iface,
+        double duration, double minimumValue, double maximumValue, double period,
+        UI_ANIMATION_SLOPE slope, IUIAnimationTransition **transition)
+{
+    struct tr_library *This = impl_from_IUIAnimationTransitionLibrary( iface );
+    FIXME( "stub (%p)->(  )\n", This );
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI tr_library_CreateAccelerateDecelerateTransition(IUIAnimationTransitionLibrary *iface,
+        double duration, double finalValue, double accelerationRatio, double decelerationRatio,
+        IUIAnimationTransition **transition)
+{
+    struct tr_library *This = impl_from_IUIAnimationTransitionLibrary( iface );
+    FIXME( "stub (%p)->(  )\n", This );
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI tr_library_CreateReversalTransition(IUIAnimationTransitionLibrary *iface, double duration,
+        IUIAnimationTransition **transition)
+{
+    struct tr_library *This = impl_from_IUIAnimationTransitionLibrary( iface );
+    FIXME( "stub (%p)->(  )\n", This );
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI tr_library_CreateCubicTransition(IUIAnimationTransitionLibrary *iface, double duration,
+        double finalValue, double finalVelocity, IUIAnimationTransition **transition)
+{
+    struct tr_library *This = impl_from_IUIAnimationTransitionLibrary( iface );
+    FIXME( "stub (%p)->(  )\n", This );
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI tr_library_CreateSmoothStopTransition(IUIAnimationTransitionLibrary *iface,
+        double maximumDuration, double finalValue, IUIAnimationTransition **transition)
+{
+    struct tr_library *This = impl_from_IUIAnimationTransitionLibrary( iface );
+    struct animation_transition *tr = heap_alloc( sizeof(*tr) );
+    HRESULT hr;
+
+    FIXME( "stub (%p)->(  )\n", This );
+
+    if (!tr) return E_OUTOFMEMORY;
+    tr->IUIAnimationTransition_iface.lpVtbl = &animation_transition_vtbl;
+    tr->ref = 1;
+
+    hr = animation_transition_QueryInterface( &tr->IUIAnimationTransition_iface, &IID_IUIAnimationTransition, (void **)transition );
+
+    IUIAnimationTransition_Release( &tr->IUIAnimationTransition_iface );
+    return hr;
+}
+
+static HRESULT WINAPI tr_library_CreateParabolicTransitionFromAcceleration(IUIAnimationTransitionLibrary *iface,
+        double finalValue, double finalVelocity, double acceleration, IUIAnimationTransition **transition)
+{
+    struct tr_library *This = impl_from_IUIAnimationTransitionLibrary( iface );
+    FIXME( "stub (%p)->(  )\n", This );
+    return E_NOTIMPL;
+}
+
+const struct IUIAnimationTransitionLibraryVtbl tr_library_vtbl =
+{
+    tr_library_QueryInterface,
+    tr_library_AddRef,
+    tr_library_Release,
+    tr_library_CreateInstantaneousTransition,
+    tr_library_CreateConstantTransition,
+    tr_library_CreateDiscreteTransition,
+    tr_library_CreateLinearTransition,
+    tr_library_CreateLinearTransitionFromSpeed,
+    tr_library_CreateSinusoidalTransitionFromVelocity,
+    tr_library_CreateSinusoidalTransitionFromRange,
+    tr_library_CreateAccelerateDecelerateTransition,
+    tr_library_CreateReversalTransition,
+    tr_library_CreateCubicTransition,
+    tr_library_CreateSmoothStopTransition,
+    tr_library_CreateParabolicTransitionFromAcceleration,
+};
+
+HRESULT tr_library_create( IUnknown *outer, REFIID iid, void **obj )
+{
+    struct tr_library *This = heap_alloc( sizeof(*This) );
+    HRESULT hr;
+
+    if (!This) return E_OUTOFMEMORY;
+    This->IUIAnimationTransitionLibrary_iface.lpVtbl = &tr_library_vtbl;
+    This->ref = 1;
+
+    hr = IUIAnimationTransitionLibrary_QueryInterface( &This->IUIAnimationTransitionLibrary_iface, iid, obj );
+
+    IUIAnimationTransitionLibrary_Release( &This->IUIAnimationTransitionLibrary_iface );
+    return hr;
+}
+
+BOOL WINAPI DllMain( HINSTANCE dll, DWORD reason, LPVOID reserved )
+{
+    TRACE("(%p %d %p)\n", dll, reason, reserved);
+
+    switch (reason)
+    {
+    case DLL_WINE_PREATTACH:
+        return FALSE;  /* prefer native version */
+    case DLL_PROCESS_ATTACH:
+        hinstance = dll;
+        DisableThreadLibraryCalls( dll );
+        break;
+    }
+    return TRUE;
+}
+
 /***********************************************************************
  *          IUIAnimationManager
  */
@@ -490,6 +911,8 @@ static HRESULT timer_create( IUnknown *outer, REFIID iid, void **obj )
 
 static struct class_factory manager_cf = { { &class_factory_vtbl }, manager_create };
 static struct class_factory timer_cf   = { { &class_factory_vtbl }, timer_create };
+static struct class_factory tr_factory_cf = { { &class_factory_vtbl }, tr_factory_create };
+static struct class_factory tr_library_cf = { { &class_factory_vtbl }, tr_library_create };
 
 /******************************************************************
  *             DllGetClassObject
@@ -504,6 +927,10 @@ HRESULT WINAPI DllGetClassObject( REFCLSID clsid, REFIID iid, void **obj )
         cf = &manager_cf.IClassFactory_iface;
     else if (IsEqualCLSID( clsid, &CLSID_UIAnimationTimer ))
         cf = &timer_cf.IClassFactory_iface;
+    else if (IsEqualCLSID( clsid, &CLSID_UIAnimationTransitionFactory ))
+        cf = &tr_factory_cf.IClassFactory_iface;
+    else if (IsEqualCLSID( clsid, &CLSID_UIAnimationTransitionLibrary ))
+        cf = &tr_library_cf.IClassFactory_iface;
 
     if (!cf)
         return CLASS_E_CLASSNOTAVAILABLE;
-- 
2.23.0

