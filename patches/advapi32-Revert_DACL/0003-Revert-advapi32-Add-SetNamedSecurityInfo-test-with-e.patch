From 753dc1b6d8025271b487b4c4cc39a6f44a274cfd Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Fri, 27 Mar 2015 15:32:32 +0100
Subject: Revert "advapi32: Add SetNamedSecurityInfo test with empty DACL."

This reverts commit 02c4f5bd275d70d1dcb48bf95775efa376b50c22.
---
 dlls/advapi32/tests/security.c | 79 +++---------------------------------------
 1 file changed, 4 insertions(+), 75 deletions(-)

diff --git a/dlls/advapi32/tests/security.c b/dlls/advapi32/tests/security.c
index c3884bf..f98bf2b 100644
--- a/dlls/advapi32/tests/security.c
+++ b/dlls/advapi32/tests/security.c
@@ -125,7 +125,6 @@ static BOOL (WINAPI *pCreateRestrictedToken)(HANDLE, DWORD, DWORD, PSID_AND_ATTR
                                              PLUID_AND_ATTRIBUTES, DWORD, PSID_AND_ATTRIBUTES, PHANDLE);
 static BOOL (WINAPI *pGetAclInformation)(PACL,LPVOID,DWORD,ACL_INFORMATION_CLASS);
 static BOOL (WINAPI *pGetAce)(PACL,DWORD,LPVOID*);
-static NTSTATUS (WINAPI *pNtSetSecurityObject)(HANDLE,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR);
 static NTSTATUS (WINAPI *pNtCreateFile)(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,PIO_STATUS_BLOCK,PLARGE_INTEGER,ULONG,ULONG,ULONG,ULONG,PVOID,ULONG);
 static BOOL     (WINAPI *pRtlDosPathNameToNtPathName_U)(LPCWSTR,PUNICODE_STRING,PWSTR*,CURDIR*);
 static NTSTATUS (WINAPI *pRtlAnsiStringToUnicodeString)(PUNICODE_STRING,PCANSI_STRING,BOOLEAN);
@@ -155,7 +154,6 @@ static void init(void)
     hntdll = GetModuleHandleA("ntdll.dll");
     pNtQueryObject = (void *)GetProcAddress( hntdll, "NtQueryObject" );
     pNtAccessCheck = (void *)GetProcAddress( hntdll, "NtAccessCheck" );
-    pNtSetSecurityObject = (void *)GetProcAddress(hntdll, "NtSetSecurityObject");
     pNtCreateFile = (void *)GetProcAddress(hntdll, "NtCreateFile");
     pRtlDosPathNameToNtPathName_U = (void *)GetProcAddress(hntdll, "RtlDosPathNameToNtPathName_U");
     pRtlAnsiStringToUnicodeString = (void *)GetProcAddress(hntdll, "RtlAnsiStringToUnicodeString");
@@ -3332,7 +3330,7 @@ static void test_GetNamedSecurityInfoA(void)
     char invalid_path[] = "/an invalid file path";
     int users_ace_id = -1, admins_ace_id = -1, i;
     char software_key[] = "MACHINE\\Software";
-    char sd[SECURITY_DESCRIPTOR_MIN_LENGTH+sizeof(void*)];
+    char sd[SECURITY_DESCRIPTOR_MIN_LENGTH];
     SECURITY_DESCRIPTOR_CONTROL control;
     ACL_SIZE_INFORMATION acl_size;
     CHAR windows_dir[MAX_PATH];
@@ -3344,12 +3342,11 @@ static void test_GetNamedSecurityInfoA(void)
     BOOL owner_defaulted;
     BOOL group_defaulted;
     BOOL dacl_defaulted;
-    HANDLE token, hTemp, h;
+    HANDLE token, hTemp;
     PSID owner, group;
     BOOL dacl_present;
     PACL pDacl;
     BYTE flags;
-    NTSTATUS status;
 
     if (!pSetNamedSecurityInfoA || !pGetNamedSecurityInfoA || !pCreateWellKnownSid)
     {
@@ -3454,8 +3451,8 @@ static void test_GetNamedSecurityInfoA(void)
     bret = SetSecurityDescriptorDacl(pSD, TRUE, pDacl, FALSE);
     ok(bret, "Failed to add ACL to security desciptor.\n");
     GetTempFileNameA(".", "foo", 0, tmpfile);
-    hTemp = CreateFileA(tmpfile, WRITE_DAC|GENERIC_WRITE, FILE_SHARE_DELETE|FILE_SHARE_READ,
-                        NULL, OPEN_EXISTING, FILE_FLAG_DELETE_ON_CLOSE, NULL);
+    hTemp = CreateFileA(tmpfile, GENERIC_WRITE, FILE_SHARE_READ, NULL, OPEN_EXISTING,
+                        FILE_FLAG_DELETE_ON_CLOSE, NULL);
     SetLastError(0xdeadbeef);
     error = pSetNamedSecurityInfoA(tmpfile, SE_FILE_OBJECT, DACL_SECURITY_INFORMATION, NULL,
                                    NULL, pDacl, NULL);
@@ -3506,74 +3503,6 @@ static void test_GetNamedSecurityInfoA(void)
     }
     LocalFree(pSD);
     HeapFree(GetProcessHeap(), 0, user);
-
-    /* show that setting empty DACL is not removing all file permissions */
-    pDacl = HeapAlloc(GetProcessHeap(), 0, sizeof(ACL));
-    bret = InitializeAcl(pDacl, sizeof(ACL), ACL_REVISION);
-    ok(bret, "Failed to initialize ACL.\n");
-    error =  pSetNamedSecurityInfoA(tmpfile, SE_FILE_OBJECT, DACL_SECURITY_INFORMATION,
-            NULL, NULL, pDacl, NULL);
-    ok(!error, "SetNamedSecurityInfoA failed with error %d\n", error);
-    HeapFree(GetProcessHeap(), 0, pDacl);
-
-    error = pGetNamedSecurityInfoA(tmpfile, SE_FILE_OBJECT, DACL_SECURITY_INFORMATION,
-            NULL, NULL, &pDacl, NULL, &pSD);
-    todo_wine ok(!error, "GetNamedSecurityInfo failed with error %d\n", error);
-
-    if (!error)
-    {
-        bret = pGetAclInformation(pDacl, &acl_size, sizeof(acl_size), AclSizeInformation);
-        ok(bret, "GetAclInformation failed\n");
-        if (acl_size.AceCount > 0)
-        {
-            bret = pGetAce(pDacl, 0, (VOID **)&ace);
-            ok(bret, "Failed to get ACE.\n");
-            ok(((ACE_HEADER *)ace)->AceFlags & INHERITED_ACE,
-                    "ACE has unexpected flags: 0x%x\n", ((ACE_HEADER *)ace)->AceFlags);
-        }
-        LocalFree(pSD);
-    }
-
-    h = CreateFileA(tmpfile, GENERIC_READ, FILE_SHARE_DELETE|FILE_SHARE_WRITE|FILE_SHARE_READ,
-            NULL, OPEN_EXISTING, 0, NULL);
-    todo_wine ok(h != INVALID_HANDLE_VALUE, "CreateFile error %d\n", GetLastError());
-    CloseHandle(h);
-
-    /* NtSetSecurityObject doesn't inherit DACL entries */
-    pSD = sd+sizeof(void*)-((ULONG_PTR)sd)%sizeof(void*);
-    InitializeSecurityDescriptor(pSD, SECURITY_DESCRIPTOR_REVISION);
-    pDacl = HeapAlloc(GetProcessHeap(), 0, sizeof(ACL));
-    bret = InitializeAcl(pDacl, sizeof(ACL), ACL_REVISION);
-    ok(bret, "Failed to initialize ACL.\n");
-    bret = SetSecurityDescriptorDacl(pSD, TRUE, pDacl, FALSE);
-    ok(bret, "Failed to add ACL to security desciptor.\n");
-    status = pNtSetSecurityObject(hTemp, DACL_SECURITY_INFORMATION, pSD);
-    ok(status == ERROR_SUCCESS, "NtSetSecurityObject returned %x\n", status);
-
-    h = CreateFileA(tmpfile, GENERIC_READ, FILE_SHARE_DELETE|FILE_SHARE_WRITE|FILE_SHARE_READ,
-            NULL, OPEN_EXISTING, 0, NULL);
-    ok(h == INVALID_HANDLE_VALUE, "CreateFile error %d\n", GetLastError());
-    CloseHandle(h);
-
-    pSetSecurityDescriptorControl(pSD, SE_DACL_AUTO_INHERIT_REQ, SE_DACL_AUTO_INHERIT_REQ);
-    status = pNtSetSecurityObject(hTemp, DACL_SECURITY_INFORMATION, pSD);
-    ok(status == ERROR_SUCCESS, "NtSetSecurityObject returned %x\n", status);
-
-    h = CreateFileA(tmpfile, GENERIC_READ, FILE_SHARE_DELETE|FILE_SHARE_WRITE|FILE_SHARE_READ,
-            NULL, OPEN_EXISTING, 0, NULL);
-    ok(h == INVALID_HANDLE_VALUE, "CreateFile error %d\n", GetLastError());
-    CloseHandle(h);
-
-    pSetSecurityDescriptorControl(pSD, SE_DACL_AUTO_INHERIT_REQ|SE_DACL_AUTO_INHERITED,
-            SE_DACL_AUTO_INHERIT_REQ|SE_DACL_AUTO_INHERITED);
-    status = pNtSetSecurityObject(hTemp, DACL_SECURITY_INFORMATION, pSD);
-    ok(status == ERROR_SUCCESS, "NtSetSecurityObject returned %x\n", status);
-
-    h = CreateFileA(tmpfile, GENERIC_READ, FILE_SHARE_DELETE|FILE_SHARE_WRITE|FILE_SHARE_READ,
-            NULL, OPEN_EXISTING, 0, NULL);
-    ok(h == INVALID_HANDLE_VALUE, "CreateFile error %d\n", GetLastError());
-    CloseHandle(h);
-    HeapFree(GetProcessHeap(), 0, pDacl);
     CloseHandle(hTemp);
 
     /* Create security descriptor with no inheritance and test that it comes back the same */
-- 
2.3.3

